{"version":3,"sources":["scripts/01-navigation.js","scripts/02-fragment-jumper.js","scripts/03-page-version-selector.js","scripts/04-page.js"],"names":[],"mappingsxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"js/site.js","sourcesContent":["(() => {\n  'use strict';\n\n  const navLists = document.querySelectorAll('.js-nav-list');\n  let navListsHeights = [];\n  let navListItems;\n  let navListItemHeight;\n  let navLink;\n\n  // calculate list height and set height on initial list\n  for (let i = 0; i < navLists.length; i++) {\n    // get all list items and reset height\n    navListItems = navLists[i].querySelectorAll('li');\n    navListItemHeight = 0;\n\n    // get height of all list items\n    for (let x = 0; x < navListItems.length; x++) {\n      navListItemHeight += navListItems[x].offsetHeight;\n      navListsHeights[i] = navListItemHeight;\n    }\n\n    // set initial active list height\n    if (navLists[i].classList.contains('active')) {\n      navLists[i].style.transition = 'none';\n      navLists[i].style.maxHeight = `${navListsHeights[i]}px`;\n    }\n\n    // setup toggle events\n    navLink = navLists[i].firstElementChild.firstElementChild;\n    navLink.addEventListener('click', (e) => toggleNav(e, navLists, navListsHeights));\n    navLink.addEventListener('touchend', (e) => toggleNav(e, navLists, navListsHeights));\n  }\n\n\n  const toggleNav = (e, navLists, navListsHeights) => {\n    let thisTarget = e.target;\n    let thisIndex;\n\n    // find this nav-list\n    while ((thisTarget = thisTarget.parentNode) && (thisTarget.tagName !== 'OL'));\n\n    for (let i = 0; i < navLists.length; i++) {\n      // if transition disabled on load, re-enable\n      if (navLists[i].style.transition) {\n        navLists[i].style.transition = null;\n      }\n\n      // make other elements inactive\n      navLists[i].classList.remove('active');\n      navLists[i].style.maxHeight = null;\n\n      // check if list matches active target\n      if (navLists[i] === thisTarget) {\n        thisIndex = i;\n      }\n    }\n\n    // make current element active\n    thisTarget.style.maxHeight = `${navListsHeights[thisIndex]}px`;\n    thisTarget.classList.add('active');\n  }\n})();\n","(() => {\n  'use strict'\n\n  var toolbar = document.querySelector('.toolbar')\n\n  function querySect1 (el) {\n    if (el.className === 'sect1') {\n      return el\n    }\n    else if (el.nodeName !== 'ARTICLE') {\n      return querySect1(el.parentNode)\n    }\n  }\n\n  function queryStickyHeading (from) {\n    var sect1 = querySect1(from)\n    if (sect1) {\n      return sect1.firstElementChild\n    }\n  }\n\n  function isStickyHeading (candidate) {\n    return candidate.nodeName === 'H2' && candidate.parentNode.className === 'sect1'\n  }\n\n  function jumpToAnchor (e) {\n    if (e) {\n      window.location.hash = '#' + this.id\n      e.preventDefault()\n    }\n    var stickyHeading = queryStickyHeading(this)\n    window.scrollTo(0, this.offsetTop - toolbar.offsetHeight - (stickyHeading ? stickyHeading.offsetHeight : 0))\n  }\n\n  function jumpToStickyHeading (e) {\n    if (e) {\n      window.location.hash = '#' + this.id\n      e.preventDefault()\n    }\n    window.scrollTo(0, document.documentElement.scrollTop = this.parentNode.offsetTop - toolbar.offsetHeight)\n  }\n\n  window.addEventListener('load', function jumpOnLoad (hash, target) {\n    if ((hash = window.location.hash) && (target = document.getElementById(hash.slice(1)))) {\n      isStickyHeading(target) ? jumpToStickyHeading.bind(target)() : jumpToAnchor.bind(target)()\n    }\n    window.removeEventListener('load', jumpOnLoad)\n  })\n\n  Array.prototype.slice.call(document.querySelectorAll('.doc a[href^=\"#\"]')).forEach(function (a) {\n    var target = document.getElementById(a.hash.slice(1))\n    if (target) {\n      a.addEventListener('click', isStickyHeading(target) ? jumpToStickyHeading.bind(target) : jumpToAnchor.bind(target))\n    }\n  })\n})();\n","(() => {\n  'use strict';\n\n  const toggles = document.querySelectorAll('.js-version');\n  for (let i = 0; i < toggles.length; i++) {\n    toggles[i].addEventListener('click', (e) => e.stopPropagation());\n    toggles[i].addEventListener('change', (e) => window.location.href = e.target.value);\n  };\n})();\n","(function() {\n  'use strict';\n\n  document.addEventListener('DOMContentLoaded', function() {\n    var doc = document.querySelector('.doc');\n\n    if (!doc) return;\n    var sidebar = document.querySelector('.js-toc');\n    var menu;\n\n    var headings = find('.sect1 > h2[id]', doc);\n    var subheadings = find('.sect1 > h3[id]', doc);\n\n    if (!headings.length) {\n      if (sidebar) {\n        sidebar.parentNode.removeChild(sidebar);\n        document.querySelector('.main').classList.add('no-sidebar');\n      }\n      return;\n    }\n\n    var lastActiveFragment;\n    var links = {};\n\n    var list = headings.reduce(function(accum, heading) {\n      var link = toArray(heading.childNodes).reduce(function(target, child) {\n        if (child.nodeName !== 'A') target.appendChild(child.cloneNode(true));\n        return target;\n      }, document.createElement('a'));\n      links[(link.href = '#' + heading.id)] = link;\n      var listItem = document.createElement('li');\n      listItem.appendChild(link);\n      // Append subitems to listItem\n      // var sublink = document.createElement('a'); // A\n      // listItem.appendChild(sublink);\n\n      accum.appendChild(listItem);\n      return accum;\n    }, document.createElement('ol'));\n\n    if (!(menu = sidebar && sidebar.querySelector('.toc-menu'))) {\n      menu = document.createElement('div');\n      menu.className = 'toc-menu';\n    }\n\n    menu.appendChild(list);\n\n    if (sidebar) window.addEventListener('scroll', onScroll);\n\n    var startOfContent = doc.querySelector('h1.page + *');\n    if (startOfContent) {\n      // generate list\n      var options = headings.reduce(function(accum, heading) {\n        var option = toArray(heading.childNodes).reduce(function(\n          target,\n          child\n        ) {\n          if (child.nodeName !== 'A') target.appendChild(child.cloneNode(true));\n          return target;\n        },\n        document.createElement('option'));\n        option.value = '#' + heading.id;\n        accum.appendChild(option);\n        return accum;\n      }, document.createElement('select'));\n\n      var selectWrap = document.createElement('div');\n      selectWrap.classList.add('select-wrapper');\n      selectWrap.appendChild(options);\n\n      // create jump to label\n      var jumpTo = document.createElement('option');\n      jumpTo.innerHTML = 'Jump toâ€¦';\n      jumpTo.setAttribute('disabled', true);\n      options.insertBefore(jumpTo, options.firstChild);\n      options.className = 'toc toc-embedded select';\n\n      // jump on change\n      options.addEventListener('change', function(e) {\n        var thisOptions = e.currentTarget.options;\n        window.location.hash = thisOptions[thisOptions.selectedIndex].value;\n      });\n\n      // add to page\n      doc.insertBefore(selectWrap, startOfContent);\n    }\n    function onScroll() {\n      var targetPosition = doc.parentNode.offsetTop;\n      var activeFragment;\n\n      headings.some(function(heading) {\n        if (heading.getBoundingClientRect().top < targetPosition) {\n          activeFragment = '#' + heading.id;\n        } else {\n          return true;\n        }\n      });\n\n      if (activeFragment) {\n        if (lastActiveFragment) {\n          links[lastActiveFragment].classList.remove('active');\n        }\n        var activeLink = links[activeFragment];\n        activeLink.classList.add('active');\n        if (menu.scrollHeight > menu.offsetHeight) {\n          menu.scrollTop = Math.max(\n            0,\n            activeLink.offsetTop + activeLink.offsetHeight - menu.offsetHeight\n          );\n        }\n        lastActiveFragment = activeFragment;\n      } else if (lastActiveFragment) {\n        links[lastActiveFragment].classList.remove('active');\n        lastActiveFragment = undefined;\n      }\n    }\n\n    function find(selector, from) {\n      return toArray((from || document).querySelectorAll(selector));\n    }\n\n    function toArray(collection) {\n      return [].slice.call(collection);\n    }\n  });\n})();\n"]}